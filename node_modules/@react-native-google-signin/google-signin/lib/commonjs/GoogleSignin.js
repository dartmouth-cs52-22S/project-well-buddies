"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.statusCodes = exports.GoogleSigninSingleton = void 0;

var _reactNative = require("react-native");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const {
  RNGoogleSignin
} = _reactNative.NativeModules;
const IS_IOS = _reactNative.Platform.OS === 'ios';

class GoogleSignin {
  constructor() {
    _defineProperty(this, "configPromise", void 0);

    if (__DEV__ && !RNGoogleSignin) {
      console.error(`RN GoogleSignin native module is not correctly linked. Please read the readme, setup and troubleshooting instructions carefully or try manual linking. If you're using Expo, please use expo-google-sign-in. This is because Expo does not support custom native modules.`);
    }
  }

  async signIn(options = {}) {
    await this.configPromise;
    return await RNGoogleSignin.signIn(options);
  }

  async hasPlayServices(options = {
    showPlayServicesUpdateDialog: true
  }) {
    if (IS_IOS) {
      return true;
    } else {
      if (options && options.showPlayServicesUpdateDialog === undefined) {
        throw new Error('RNGoogleSignin: Missing property `showPlayServicesUpdateDialog` in options object for `hasPlayServices`');
      }

      return RNGoogleSignin.playServicesAvailable(options.showPlayServicesUpdateDialog);
    }
  }

  configure(options = {}) {
    if (options.offlineAccess && !options.webClientId) {
      throw new Error('RNGoogleSignin: offline use requires server web ClientID');
    }

    this.configPromise = RNGoogleSignin.configure(options);
  }

  async addScopes(options) {
    const isSignedIn = await this.isSignedIn();

    if (!isSignedIn) {
      return null;
    }

    return IS_IOS ? RNGoogleSignin.addScopes(options) : RNGoogleSignin.getCurrentUser();
  }

  async signInSilently() {
    await this.configPromise;
    return RNGoogleSignin.signInSilently();
  }

  async signOut() {
    return RNGoogleSignin.signOut();
  }

  async revokeAccess() {
    return RNGoogleSignin.revokeAccess();
  }

  async isSignedIn() {
    return RNGoogleSignin.isSignedIn();
  }

  async getCurrentUser() {
    return RNGoogleSignin.getCurrentUser();
  }

  async clearCachedAccessToken(tokenString) {
    if (!tokenString || typeof tokenString !== 'string') {
      return Promise.reject('GoogleSignIn: clearCachedAccessToken() expects a string token.');
    }

    return IS_IOS ? null : await RNGoogleSignin.clearCachedAccessToken(tokenString);
  }

  async getTokens() {
    if (IS_IOS) {
      const tokens = await RNGoogleSignin.getTokens();
      return tokens;
    } else {
      const userObject = await RNGoogleSignin.getTokens();
      return {
        idToken: userObject.idToken,
        accessToken: userObject.accessToken
      };
    }
  }

}

const GoogleSigninSingleton = new GoogleSignin();
exports.GoogleSigninSingleton = GoogleSigninSingleton;
const statusCodes = {
  SIGN_IN_CANCELLED: RNGoogleSignin.SIGN_IN_CANCELLED,
  IN_PROGRESS: RNGoogleSignin.IN_PROGRESS,
  PLAY_SERVICES_NOT_AVAILABLE: RNGoogleSignin.PLAY_SERVICES_NOT_AVAILABLE,
  SIGN_IN_REQUIRED: RNGoogleSignin.SIGN_IN_REQUIRED
};
exports.statusCodes = statusCodes;
//# sourceMappingURL=GoogleSignin.js.map